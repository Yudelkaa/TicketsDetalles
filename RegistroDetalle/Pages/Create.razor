@page "/Create"
@inject HttpClient httpClient

<PageTitle>Registro Tickets</PageTitle>
<EditForm Model="tickets" OnValidSubmit="Guardar" FormName="tickets">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header" style="color: white; background-color: royalblue;">
				<NavLink class="btn btn-light float-end" href="Details">Consultar Tickets</NavLink>
				<h1><strong>Crear Ticket</strong></h1>
			</div>
			<div class="card-body">

				<div class="col-xs-8 col-sm-12 col-md-8 col-lg-3 col-xl-2.5">
					<label><strong>Tickets ID:</strong></label>
					<div class="input-group mb-3">
						<InputNumber @bind-Value="tickets.TicketId" class="form-control" aria-describedby="BotonBuscar" />
						<button @onclick="Buscar" class="btn btn-primary bi bi-search-heart" type="button" id="BotonBuscar"></button>
					</div>
				</div>

				<div class="row">
					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label class="form-label" for="inputFecha"><strong>Fecha:</strong></label>
						<InputDate @bind-Value="tickets.Fecha" class="form-control" />
						<ValidationMessage For="@(() => tickets.Fecha)" />
					</div>

					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label class="form-label" for="ClienteID"><strong>Cliente ID:</strong></label>
						<InputNumber @bind-Value="tickets.ClienteId" class="form-control">
							<ValidationMessage For="@(() => tickets.ClienteId)" />
						</InputNumber>
					</div>
				</div>

				<div class="row">
					<div class="col-4">
						<label><strong>Solicitado por:</strong></label>
						<InputText @bind-Value="tickets.SolicitadoPor" class="form-control">
							@foreach (var ticket in listaSolicitado)
							{
								<option value="@ticket.SolicitadoPor">@ticket.SolicitadoPor</option>
							}
						</InputText>
						<ValidationMessage For="@(() => tickets.SolicitadoPor)" />
					</div>

					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label for="Asunto"><strong>Asunto:</strong></label>
						<InputText @bind-Value="tickets.Asunto" class="form-control" />
						<ValidationMessage For="@(() => tickets.Asunto)" />
					</div>
				</div>
				<div class="row">
					<div class="col-4">
						<label class="form-label" for="Descripcion"><strong>Descripción</strong></label>
						<InputTextArea @bind-Value="tickets.Descripcion" class="form-control" />
						<ValidationMessage For="@(() => tickets.Descripcion)" /><br />
					</div>
				</div>

			</div>
			<div class="card-footer justify-content-center d-flex">
				<div>
					<button type="submit" class="btn btn-primary bi bi-floppy">
						Guardar<i class="oi oi-document" />
					</button>
				</div>
			</div>
		</div>
		<div class="my-4"></div>

		@*Tickets detalle*@
		<div class="card shadow-lg">

			<div class="card-header" style="color: white; background-color: royalblue;">
				<h1 class="fw-bold">Detalle Ticket</h1>
			</div>
			<div class="card-body">
				<div>
					<label class="form-label fw-bold"><span class="bi bi-person-heart" /> Nombre:</label>
					<InputText @bind-Value="Detalle.Emisor" class="form-control" placeholder="Enel Almonte"></InputText>
					<ValidationMessage For="@(() => Detalle.Emisor)" />
				</div>
				<div>
					<label class="form-label fw-bold"><span class="bi bi-chat-heart-fill" /> Mensaje:</label>
					<InputTextArea @bind-Value="Detalle.Mensaje" class="form-control" placeholder="Escriba su mensaje"></InputTextArea>
					<ValidationMessage For="@(() => Detalle.Mensaje)" />
				</div>
			</div>
			<div class="card-footer d-flex justify-content-center">
				<button type="button" class="btn btn-success bi bi-plus-square-fill" @onclick="AddDetalle"> Agregar</button>
			</div>
			<table class='table table-sm justify-content-center'>
				<thead>
					<tr>
						<th>TicketId</th>
						<th>Emisor</th>
						<th>Mensaje</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var detalle in tickets.TicketsDetalle)
					{
						var ticketEncontrado = BuscarTicket(detalle.TicketId);
						<tr>
							<td>@tickets.TicketId</td>
							<td>@detalle.Emisor</td>
							<td>@detalle.Mensaje</td>
							<td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]

	public int TicketId { get; set; }
	List<Tickets> listaSolicitado = new List<Tickets>();
	public Tickets tickets { get; set; } = new Tickets();
	public TicketsDetalle Detalle { get; set; } = new TicketsDetalle();

	public bool mensajeVacio;
	public bool emisorVacio;

	protected override async Task OnInitializedAsync()
	{
		if (TicketId > 0)
		{
			this.tickets.TicketId = TicketId;
			await Buscar();
		}
	}

	private async Task<Tickets> BuscarTicket(int ticketId)
	{
		Tickets tickets = new Tickets();
		var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{ticketId}");
		if (ticketEncontrado != null)
			return tickets = ticketEncontrado;
		return new Tickets();
	}

	public async Task Buscar()
	{
		var ticketIdEncontrado = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!
		.ToList()
		.Any(t => t.TicketId == tickets.TicketId);
		if (ticketIdEncontrado)
		{
			var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{tickets.TicketId}");
			if (ticketEncontrado != null)
			{
				this.tickets = ticketEncontrado;
				StateHasChanged();
			}
		}
		else
		{
			return;
		}
	}

	public async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Tickets", tickets);
		if (!response.IsSuccessStatusCode)
		{
			return;
		}
		var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
		if (ticketDevuelto is not null)
		{
			tickets = ticketDevuelto;
			StateHasChanged();
			this.Nuevo();
		}
	}

	public void Nuevo()
	{
		this.tickets = new Tickets();
		this.Detalle = new TicketsDetalle();
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Tickets/{tickets.TicketId}");
		if (!response.IsSuccessStatusCode)
		{
			return;
		}
		Nuevo();
	}

	public bool Validar()
	{
		mensajeVacio = string.IsNullOrEmpty(Detalle.Mensaje);
		emisorVacio = string.IsNullOrEmpty(Detalle.Emisor);
		return mensajeVacio || emisorVacio || Detalle.Emisor!.Any(Char.IsDigit);
	}

	public void AddDetalle()
	{
		if (tickets != null)
		{
			if (Validar())
			{
				return;
			}
			Detalle.TicketId = tickets.TicketId;

			tickets.TicketsDetalle.Add(Detalle);
			Detalle = new TicketsDetalle();
		}
	}

	public async Task RemoverDetalle(TicketsDetalle detalle)
	{

		var detalleEncontrado = tickets.TicketsDetalle.FirstOrDefault(t => t.DetalleId == detalle.DetalleId);
		if (detalleEncontrado != null)
		{
			var ticket = BuscarTicket(detalleEncontrado.TicketId);
			detalle = detalleEncontrado;
			Detalle = detalleEncontrado;
			tickets.TicketsDetalle.Remove(detalle);
			await httpClient.DeleteAsync($"api/Tickets/DeleteTicketsMessages/{detalle.DetalleId}");
		}
	}
}