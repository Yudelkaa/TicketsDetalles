@page "/Create"
@inject HttpClient httpClient

<PageTitle>Registro Tickets</PageTitle>
<EditForm Model="tickets" OnValidSubmit="Guardar" FormName="tickets">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header" style="color: white; background-color: royalblue;">
				<NavLink class="btn btn-light float-end" href="Details">Consultar Tickets</NavLink>
				<h1><strong>Crear</strong></h1>
				<h3>Tickets</h3>
			</div>
			<div class="card-body">

				<div class="col-xs-8 col-sm-12 col-md-8 col-lg-3 col-xl-2.5">
					<label><strong>Tickets ID:</strong></label>
					<div class="input-group mb-3">
						<InputNumber @bind-Value="tickets.TicketId" class="form-control" aria-describedby="BotonBuscar" />
						<button @onclick="Buscar" class="btn btn-primary bi bi-search-heart" type="button" id="BotonBuscar"></button>
					</div>
				</div>

				<div class="row">
					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label class="form-label" for="inputFecha"><strong>Fecha:</strong></label>
						<InputDate @bind-Value="tickets.Fecha" class="form-control" />
						<ValidationMessage For="@(() => tickets.Fecha)" />
					</div>

					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label class="form-label" for="ClienteID"><strong>Cliente ID:</strong></label>
						<InputNumber @bind-Value="tickets.ClienteId" class="form-control">
							<ValidationMessage For="@(() => tickets.ClienteId)" />
						</InputNumber>
					</div>
				</div>

				<div class="row">
					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label><strong>Solicitado por:</strong></label>
						<InputSelect @bind-Value="tickets.SolicitadoPor" class="form-select">
							<option value=""></option>
							@foreach (var ticket in listaSolicitado)
							{
								<option value="@ticket.SolicitadoPor">@ticket.SolicitadoPor</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => tickets.SolicitadoPor)" />
					</div>

					<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
						<label for="Asunto"><strong>Asunto:</strong></label>
						<InputText @bind-Value="tickets.Asunto" class="form-control" />
						<ValidationMessage For="@(() => tickets.Asunto)" />
					</div>
				</div>
				<div class="row">
					<div class="col-4">
						<label class="form-label" for="Descripcion"><strong>Descripción</strong></label>
						<InputTextArea @bind-Value="tickets.Descripcion" class="form-control" />
						<ValidationMessage For="@(() => tickets.Descripcion)" /><br />
					</div>
				</div>

			</div>
			<div class="card-footer justify-content-center d-flex">
				<div>
					<button type="submit" class="btn btn-primary bi bi-floppy"> Guardar<i class="oi oi-document" />
					</button>@mensaje
				</div>
			</div>
		</div>
		
	</div>
</EditForm>

@code {
	public Tickets tickets { get; set; } = new Tickets();
	public string mensajeError = "";
	public string? mensaje;
	public string? mensajeElim;
	List<Tickets> listaSolicitado = new List<Tickets>();

	public async Task Buscar()
	{
		var ticketIdEncontrado = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!
		.ToList()
		.Any(t => t.TicketId == tickets.TicketId);
		if (ticketIdEncontrado)
		{
			var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{tickets.TicketId}");
			if (ticketEncontrado != null)
			{
				this.tickets = ticketEncontrado;
				StateHasChanged();
			}
		}
		else
		{
			return;
		}
	}

	public async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Tickets", tickets);
		if (!response.IsSuccessStatusCode)
		{
			return;
		}
		var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
		if (ticketDevuelto is not null)
		{
			tickets = ticketDevuelto;
			StateHasChanged();
			this.Nuevo();
		}
	}

	void Nuevo()
	{
		this.tickets = new Tickets();
		mensajeError = string.Empty;
	}
}