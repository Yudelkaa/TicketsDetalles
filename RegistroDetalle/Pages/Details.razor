@page "/Details"
@inject HttpClient httpClient
@inject NotificationService notificationService

<PageTitle>Registro de Tickets</PageTitle>
<EditForm Model="tickets" OnValidSubmit="Guardar">
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header alert-secondary" style="color: white; background-color: royalblue;">
				<NavLink class="btn btn-light float-end" href="/Create">Registrar Tickets</NavLink>
				<h1><strong>Consultas</strong></h1>
				<h3>Tickets</h3>
			</div>

			<table class="table table-striped table-bordered justify-content">
				<thead>
					<tr class="text-center">
						<th>TicketId</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var ticket in Tickets)
					{
						<tr class="text-center">
							<td>@ticket.TicketId</td>
							<td><button class="btn btn-danger bi bi-trash" @onclick="() => Eliminar()"></button></td> // Pasar el ticket como parámetro
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div>@mensaje</div>
	</div>
</EditForm>

@code {
	public Tickets? tickets { get; set; } = new Tickets();
	public string mensaje = "";
	public int? ticketEditando = null;

	public int Filtro { get; set; }
	public List<Tickets>? Tickets { get; set; }
	public int Conteo { get; set; }

	public DateTime Desde { get; set; }
	public DateTime Hasta { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await Buscar();
		Desde = DateTime.Now.AddMonths(-1);
		Hasta = DateTime.Now;
	}

	public async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Tickets", tickets);
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo Guardar correctamente, verifique los campos",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			return;
		}
		var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
		if (ticketDevuelto is not null)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Validacion",
					Detail = "Ticket Guardado Correctamente",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			tickets = ticketDevuelto;
			StateHasChanged();
			this.Nuevo();
		}
	}

	public async Task Buscar()
	{
		if (Filtro == 1 && tickets!.TicketId > 0)
		{
			Tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!.Where(t => t.TicketId == tickets!.TicketId && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
			StateHasChanged();
		}
		else
		if (Filtro == 2 && !string.IsNullOrEmpty(tickets!.Asunto))
		{
			Tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!.Where(t => t.Asunto!.ToLower() == tickets!.Asunto.ToLower() && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
			StateHasChanged();
		}
		else
		{
			Tickets = await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets");
			StateHasChanged();
		}
		Conteo = Tickets != null ? Tickets!.Count() : 0;
	}

	void Nuevo()
	{
		this.tickets = new Tickets();
		mensaje = string.Empty;
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Tickets/{tickets.TicketId}");
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "El Ticket no fue Eliminado Correctamente",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			return;
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Validacion",
					Detail = "Ticket Eliminado Correctamente",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
		}
		Nuevo();
	}
}
